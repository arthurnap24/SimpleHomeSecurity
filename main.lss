
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000048  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000009c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000000bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000076  00000000  00000000  000000d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000041  00000000  00000000  0000014d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000078  00000000  00000000  0000018e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000085  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	02 d0       	rcall	.+4      	; 0x30 <main>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <main>:

int main (void)
{
  //here, you set up the which pins of the ATTiny85 is input/output
  //0=input, 1=output
  DDRB = 0b00000010;
  30:	82 e0       	ldi	r24, 0x02	; 2
  32:	87 bb       	out	0x17, r24	; 23
  
  //loop of the program (analous to loop() of arduino:
  while (1)
  {
    //check if PB0 is high, if so, buzzer rings
    if ((PINB & 1) == 1)
  34:	b0 9b       	sbis	0x16, 0	; 22
  36:	02 c0       	rjmp	.+4      	; 0x3c <__CCP__+0x8>
	{
	  PORTB = 0b00000010;
  38:	88 bb       	out	0x18, r24	; 24
  3a:	fc cf       	rjmp	.-8      	; 0x34 <__CCP__>
	}
	//else if low, buzzer stops
	else if ((PINB & 1) == 0)
  3c:	b0 99       	sbic	0x16, 0	; 22
  3e:	fa cf       	rjmp	.-12     	; 0x34 <__CCP__>
	{
	  PORTB = 0b00000000;
  40:	18 ba       	out	0x18, r1	; 24
  42:	f8 cf       	rjmp	.-16     	; 0x34 <__CCP__>

00000044 <_exit>:
  44:	f8 94       	cli

00000046 <__stop_program>:
  46:	ff cf       	rjmp	.-2      	; 0x46 <__stop_program>
